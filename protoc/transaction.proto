syntax = "proto3";

package protoc;
option go_package = "github.com/GooseFuse/distributed-auth-system/protoc;protoc";

// Transaction represents a key-value transaction with authentication and signature
message Transaction {
    string id = 1;
    string key = 2;
    string value = 3;
    bytes signature = 4;
    string public_key = 5;
    int64 timestamp = 6;
}

message LogEntry {
    int32 term = 1;
    int32 index = 2;
    Transaction command = 3;
}

// TransactionRequest represents a request to handle a transaction
message TransactionRequest {
    Transaction transaction = 1;
}

// TransactionResponse represents a response from handling a transaction
message TransactionResponse {
    bool success = 1;
    string error_message = 2;
    string merkle_root = 3; // Current Merkle root after transaction
    string leader_url = 4;
}

// AppendEntriesRequest represents a request for the AppendEntries RPC in Raft
message AppendEntriesRequest {
    int32 term = 1;
    string leader_id = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    repeated LogEntry entries = 5;
    int32 leader_commit = 6;
}

// AppendEntriesResponse represents a response to the AppendEntries RPC
message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

// RequestVoteRequest represents a request for the RequestVote RPC in Raft
message RequestVoteRequest {
    int32 term = 1;
    string candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

// RequestVoteResponse represents a response to the RequestVote RPC
message RequestVoteResponse {
    int32 term = 1;
    bool vote_granted = 2;
}

// SyncRequest represents a request to synchronize state with another node
message SyncRequest {
    string node_id = 1;
    string merkle_root = 2;
    bytes bloom_filter = 3;
}

// SyncResponse represents a response to a sync request
message SyncResponse {
    bool success = 1;
    string merkle_root = 2;
    repeated Transaction missing_transactions = 3;
}

// StateVerificationRequest represents a request to verify state with another node
message StateVerificationRequest {
    string node_id = 1;
    string merkle_root = 2;
}

// StateVerificationResponse represents a response to a state verification request
message StateVerificationResponse {
    bool consistent = 1;
    string merkle_root = 2;
}

// NodeInfo represents information about a node in the network
message NodeInfo {
    string id = 1;
    string address = 2;
    bool is_leader = 3;
    int32 term = 4;
}

// NetworkInfoRequest represents a request for information about the network
message NetworkInfoRequest {
    string requesting_node_id = 1;
}

// NetworkInfoResponse represents a response with information about the network
message NetworkInfoResponse {
    repeated NodeInfo nodes = 1;
    string leader_id = 2;
    int32 current_term = 3;
}

// CheckpointRequest represents a request to create or restore from a checkpoint
message CheckpointRequest {
    string node_id = 1;
    bool create = 2; // true for create, false for restore
    int64 checkpoint_id = 3; // Used for restore only
}

// CheckpointResponse represents a response to a checkpoint request
message CheckpointResponse {
    bool success = 1;
    int64 checkpoint_id = 2;
    string error_message = 3;
}

message GetRequest {
    string user = 1;
}

message GetResponse {
    string value = 1;
    bool success = 2;
    string error_message = 3;
}

message AuthRequest {
    string user = 1;
    string pass = 2;
}

message AuthResponse {
    bool success = 1;
    string error_message = 2;
}

// TransactionService defines the gRPC service for handling transactions and consensus
service TransactionService {
    // Transaction handling
    rpc HandleTransaction(TransactionRequest) returns (TransactionResponse);
    
    // Raft consensus RPCs
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    
    // Synchronization and state verification
    rpc SyncState(SyncRequest) returns (SyncResponse);
    rpc VerifyState(StateVerificationRequest) returns (StateVerificationResponse);
    
    // Network management
    rpc GetNetworkInfo(NetworkInfoRequest) returns (NetworkInfoResponse);
    
    // Checkpoint management
    rpc ManageCheckpoint(CheckpointRequest) returns (CheckpointResponse);

    // Other operations
    rpc Get(GetRequest) returns (GetResponse);
    rpc Auth(AuthRequest) returns (AuthResponse);
}